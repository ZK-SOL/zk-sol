/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateMerkleArgs,
  createMerkleArgsBeet,
} from '../types/CreateMerkleArgs'

/**
 * @category Instructions
 * @category CreateMerkle
 * @category generated
 */
export type CreateMerkleInstructionArgs = {
  args: CreateMerkleArgs
}
/**
 * @category Instructions
 * @category CreateMerkle
 * @category generated
 */
export const createMerkleStruct = new beet.BeetArgsStruct<
  CreateMerkleInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createMerkleArgsBeet],
  ],
  'CreateMerkleInstructionArgs'
)
/**
 * Accounts required by the _createMerkle_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] merkle
 * @property [_writable_] merkleZeros
 * @category Instructions
 * @category CreateMerkle
 * @category generated
 */
export type CreateMerkleInstructionAccounts = {
  signer: web3.PublicKey
  merkle: web3.PublicKey
  merkleZeros: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createMerkleInstructionDiscriminator = [
  206, 19, 107, 204, 29, 200, 175, 235,
]

/**
 * Creates a _CreateMerkle_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateMerkle
 * @category generated
 */
export function createCreateMerkleInstruction(
  accounts: CreateMerkleInstructionAccounts,
  args: CreateMerkleInstructionArgs,
  programId = new web3.PublicKey('4BEBe7TVDef5Nfdft252mMCSNBBmPLQ2gVXmKvJvSbP1')
) {
  const [data] = createMerkleStruct.serialize({
    instructionDiscriminator: createMerkleInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.merkle,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleZeros,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
