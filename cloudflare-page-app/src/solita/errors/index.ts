/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * NumericalOverflow: 'Numerical Overflow'
 *
 * @category Errors
 * @category generated
 */
export class NumericalOverflowError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'NumericalOverflow'
  constructor() {
    super('Numerical Overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericalOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new NumericalOverflowError())
createErrorFromNameLookup.set(
  'NumericalOverflow',
  () => new NumericalOverflowError()
)

/**
 * Unauthorized: 'Account is not authorized to execute this instruction'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Account is not authorized to execute this instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * OwnerMismatch: 'Token account owner did not match intended owner'
 *
 * @category Errors
 * @category generated
 */
export class OwnerMismatchError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'OwnerMismatch'
  constructor() {
    super('Token account owner did not match intended owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OwnerMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new OwnerMismatchError())
createErrorFromNameLookup.set('OwnerMismatch', () => new OwnerMismatchError())

/**
 * BadMath: 'Bad math'
 *
 * @category Errors
 * @category generated
 */
export class BadMathError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'BadMath'
  constructor() {
    super('Bad math')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BadMathError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new BadMathError())
createErrorFromNameLookup.set('BadMath', () => new BadMathError())

/**
 * DeserializeUncompressed: 'deserialize_uncompressed error'
 *
 * @category Errors
 * @category generated
 */
export class DeserializeUncompressedError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'DeserializeUncompressed'
  constructor() {
    super('deserialize_uncompressed error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DeserializeUncompressedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new DeserializeUncompressedError())
createErrorFromNameLookup.set(
  'DeserializeUncompressed',
  () => new DeserializeUncompressedError()
)

/**
 * SerializeUncompressed: 'serialize_uncompressed error'
 *
 * @category Errors
 * @category generated
 */
export class SerializeUncompressedError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'SerializeUncompressed'
  constructor() {
    super('serialize_uncompressed error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SerializeUncompressedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new SerializeUncompressedError())
createErrorFromNameLookup.set(
  'SerializeUncompressed',
  () => new SerializeUncompressedError()
)

/**
 * ExtractProofA: 'extract proof_a'
 *
 * @category Errors
 * @category generated
 */
export class ExtractProofAError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'ExtractProofA'
  constructor() {
    super('extract proof_a')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ExtractProofAError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new ExtractProofAError())
createErrorFromNameLookup.set('ExtractProofA', () => new ExtractProofAError())

/**
 * ExtractProofB: 'extract proof_b'
 *
 * @category Errors
 * @category generated
 */
export class ExtractProofBError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'ExtractProofB'
  constructor() {
    super('extract proof_b')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ExtractProofBError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new ExtractProofBError())
createErrorFromNameLookup.set('ExtractProofB', () => new ExtractProofBError())

/**
 * ExtractProofC: 'extract proof_c'
 *
 * @category Errors
 * @category generated
 */
export class ExtractProofCError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'ExtractProofC'
  constructor() {
    super('extract proof_c')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ExtractProofCError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new ExtractProofCError())
createErrorFromNameLookup.set('ExtractProofC', () => new ExtractProofCError())

/**
 * Groth16CreateError: 'Groth16Error Create error'
 *
 * @category Errors
 * @category generated
 */
export class Groth16CreateErrorError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'Groth16CreateError'
  constructor() {
    super('Groth16Error Create error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, Groth16CreateErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new Groth16CreateErrorError())
createErrorFromNameLookup.set(
  'Groth16CreateError',
  () => new Groth16CreateErrorError()
)

/**
 * Groth16VerifyError: 'Groth16Error Verify error'
 *
 * @category Errors
 * @category generated
 */
export class Groth16VerifyErrorError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'Groth16VerifyError'
  constructor() {
    super('Groth16Error Verify error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, Groth16VerifyErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new Groth16VerifyErrorError())
createErrorFromNameLookup.set(
  'Groth16VerifyError',
  () => new Groth16VerifyErrorError()
)

/**
 * DeserializeWithMode: 'deserialize_with_mode error'
 *
 * @category Errors
 * @category generated
 */
export class DeserializeWithModeError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'DeserializeWithMode'
  constructor() {
    super('deserialize_with_mode error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DeserializeWithModeError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new DeserializeWithModeError())
createErrorFromNameLookup.set(
  'DeserializeWithMode',
  () => new DeserializeWithModeError()
)

/**
 * SerializeWithMode: 'serialize_with_mode error'
 *
 * @category Errors
 * @category generated
 */
export class SerializeWithModeError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'SerializeWithMode'
  constructor() {
    super('serialize_with_mode error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SerializeWithModeError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new SerializeWithModeError())
createErrorFromNameLookup.set(
  'SerializeWithMode',
  () => new SerializeWithModeError()
)

/**
 * FailedToEcAccumulator: 'failed to_ec_accumulator'
 *
 * @category Errors
 * @category generated
 */
export class FailedToEcAccumulatorError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'FailedToEcAccumulator'
  constructor() {
    super('failed to_ec_accumulator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FailedToEcAccumulatorError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new FailedToEcAccumulatorError())
createErrorFromNameLookup.set(
  'FailedToEcAccumulator',
  () => new FailedToEcAccumulatorError()
)

/**
 * MerkleErrorEmptyLeaves: 'Cannot create Merkle tree with empty leaves'
 *
 * @category Errors
 * @category generated
 */
export class MerkleErrorEmptyLeavesError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'MerkleErrorEmptyLeaves'
  constructor() {
    super('Cannot create Merkle tree with empty leaves')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MerkleErrorEmptyLeavesError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new MerkleErrorEmptyLeavesError())
createErrorFromNameLookup.set(
  'MerkleErrorEmptyLeaves',
  () => new MerkleErrorEmptyLeavesError()
)

/**
 * MerkleErrorInvalidDepth: 'Invalid depth for Merkle tree'
 *
 * @category Errors
 * @category generated
 */
export class MerkleErrorInvalidDepthError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'MerkleErrorInvalidDepth'
  constructor() {
    super('Invalid depth for Merkle tree')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MerkleErrorInvalidDepthError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new MerkleErrorInvalidDepthError())
createErrorFromNameLookup.set(
  'MerkleErrorInvalidDepth',
  () => new MerkleErrorInvalidDepthError()
)

/**
 * MerkleErrorInvalidProof: 'Invalid proof provided'
 *
 * @category Errors
 * @category generated
 */
export class MerkleErrorInvalidProofError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'MerkleErrorInvalidProof'
  constructor() {
    super('Invalid proof provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MerkleErrorInvalidProofError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new MerkleErrorInvalidProofError())
createErrorFromNameLookup.set(
  'MerkleErrorInvalidProof',
  () => new MerkleErrorInvalidProofError()
)

/**
 * MerkleErrorTooLarge: 'Too Large'
 *
 * @category Errors
 * @category generated
 */
export class MerkleErrorTooLargeError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'MerkleErrorTooLarge'
  constructor() {
    super('Too Large')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MerkleErrorTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new MerkleErrorTooLargeError())
createErrorFromNameLookup.set(
  'MerkleErrorTooLarge',
  () => new MerkleErrorTooLargeError()
)

/**
 * MerkleErrorFull: 'Full'
 *
 * @category Errors
 * @category generated
 */
export class MerkleErrorFullError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'MerkleErrorFull'
  constructor() {
    super('Full')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MerkleErrorFullError)
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new MerkleErrorFullError())
createErrorFromNameLookup.set(
  'MerkleErrorFull',
  () => new MerkleErrorFullError()
)

/**
 * MerkleErrorUnknownRoot: 'Unknown root'
 *
 * @category Errors
 * @category generated
 */
export class MerkleErrorUnknownRootError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'MerkleErrorUnknownRoot'
  constructor() {
    super('Unknown root')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MerkleErrorUnknownRootError)
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new MerkleErrorUnknownRootError())
createErrorFromNameLookup.set(
  'MerkleErrorUnknownRoot',
  () => new MerkleErrorUnknownRootError()
)

/**
 * InvalidMerkleDepth: 'Invalid Merkle depth'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMerkleDepthError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'InvalidMerkleDepth'
  constructor() {
    super('Invalid Merkle depth')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMerkleDepthError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new InvalidMerkleDepthError())
createErrorFromNameLookup.set(
  'InvalidMerkleDepth',
  () => new InvalidMerkleDepthError()
)

/**
 * CantFindMerkleNode: 'Cannot find Merkle node'
 *
 * @category Errors
 * @category generated
 */
export class CantFindMerkleNodeError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'CantFindMerkleNode'
  constructor() {
    super('Cannot find Merkle node')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CantFindMerkleNodeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new CantFindMerkleNodeError())
createErrorFromNameLookup.set(
  'CantFindMerkleNode',
  () => new CantFindMerkleNodeError()
)

/**
 * SerializeData: 'Serialize data'
 *
 * @category Errors
 * @category generated
 */
export class SerializeDataError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'SerializeData'
  constructor() {
    super('Serialize data')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SerializeDataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new SerializeDataError())
createErrorFromNameLookup.set('SerializeData', () => new SerializeDataError())

/**
 * InvalidLookupTable: 'Invalid Lookup Table'
 *
 * @category Errors
 * @category generated
 */
export class InvalidLookupTableError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'InvalidLookupTable'
  constructor() {
    super('Invalid Lookup Table')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidLookupTableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new InvalidLookupTableError())
createErrorFromNameLookup.set(
  'InvalidLookupTable',
  () => new InvalidLookupTableError()
)

/**
 * WrongPdaAddress: 'Wrong PDA Address'
 *
 * @category Errors
 * @category generated
 */
export class WrongPdaAddressError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'WrongPdaAddress'
  constructor() {
    super('Wrong PDA Address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongPdaAddressError)
    }
  }
}

createErrorFromCodeLookup.set(0x1788, () => new WrongPdaAddressError())
createErrorFromNameLookup.set(
  'WrongPdaAddress',
  () => new WrongPdaAddressError()
)

/**
 * TooManyRemainingAccounts: 'Too Many Remaining Accounts'
 *
 * @category Errors
 * @category generated
 */
export class TooManyRemainingAccountsError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'TooManyRemainingAccounts'
  constructor() {
    super('Too Many Remaining Accounts')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooManyRemainingAccountsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1789, () => new TooManyRemainingAccountsError())
createErrorFromNameLookup.set(
  'TooManyRemainingAccounts',
  () => new TooManyRemainingAccountsError()
)

/**
 * PendingProofExists: 'Pending Proof Exists'
 *
 * @category Errors
 * @category generated
 */
export class PendingProofExistsError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'PendingProofExists'
  constructor() {
    super('Pending Proof Exists')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PendingProofExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x178a, () => new PendingProofExistsError())
createErrorFromNameLookup.set(
  'PendingProofExists',
  () => new PendingProofExistsError()
)

/**
 * MissingPendingProof: 'Missing Pending Proof'
 *
 * @category Errors
 * @category generated
 */
export class MissingPendingProofError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'MissingPendingProof'
  constructor() {
    super('Missing Pending Proof')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingPendingProofError)
    }
  }
}

createErrorFromCodeLookup.set(0x178b, () => new MissingPendingProofError())
createErrorFromNameLookup.set(
  'MissingPendingProof',
  () => new MissingPendingProofError()
)

/**
 * NotLowestPendingProof: 'Not Lowest Pending Proof'
 *
 * @category Errors
 * @category generated
 */
export class NotLowestPendingProofError extends Error {
  readonly code: number = 0x178c
  readonly name: string = 'NotLowestPendingProof'
  constructor() {
    super('Not Lowest Pending Proof')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotLowestPendingProofError)
    }
  }
}

createErrorFromCodeLookup.set(0x178c, () => new NotLowestPendingProofError())
createErrorFromNameLookup.set(
  'NotLowestPendingProof',
  () => new NotLowestPendingProofError()
)

/**
 * AccountDataTooSmall: 'Account Data Too Small'
 *
 * @category Errors
 * @category generated
 */
export class AccountDataTooSmallError extends Error {
  readonly code: number = 0x178d
  readonly name: string = 'AccountDataTooSmall'
  constructor() {
    super('Account Data Too Small')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountDataTooSmallError)
    }
  }
}

createErrorFromCodeLookup.set(0x178d, () => new AccountDataTooSmallError())
createErrorFromNameLookup.set(
  'AccountDataTooSmall',
  () => new AccountDataTooSmallError()
)

/**
 * SignerCantMatchRecipient: 'Signer Cant Match Recipient'
 *
 * @category Errors
 * @category generated
 */
export class SignerCantMatchRecipientError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'SignerCantMatchRecipient'
  constructor() {
    super('Signer Cant Match Recipient')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SignerCantMatchRecipientError)
    }
  }
}

createErrorFromCodeLookup.set(0x178e, () => new SignerCantMatchRecipientError())
createErrorFromNameLookup.set(
  'SignerCantMatchRecipient',
  () => new SignerCantMatchRecipientError()
)

/**
 * ValueCantBePoseidonHashed: 'Value can't be Poseidon hashed'
 *
 * @category Errors
 * @category generated
 */
export class ValueCantBePoseidonHashedError extends Error {
  readonly code: number = 0x178f
  readonly name: string = 'ValueCantBePoseidonHashed'
  constructor() {
    super("Value can't be Poseidon hashed")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ValueCantBePoseidonHashedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178f,
  () => new ValueCantBePoseidonHashedError()
)
createErrorFromNameLookup.set(
  'ValueCantBePoseidonHashed',
  () => new ValueCantBePoseidonHashedError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
